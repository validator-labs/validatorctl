package config

import (
	"os"
	"slices"

	"github.com/spectrocloud-labs/prompts-tui/prompts"

	vtypes "github.com/validator-labs/validator/pkg/types"
)

type MachineOptions struct {
	CPUOpts     []string
	MemoryOpts  []string
	DiskOpts    []string
	Options     []string
	MongoPvc    []string
	MongoCpu    []string
	MongoMem    []string
	MinMongoPvc int
	MinMongoCpu int
	MinMongoMem int
	MinCPU      int
	MinMemory   int
	MinDisk     int
}

type IamCheckType string

const (
	ConfigFile   = "validator.yaml"
	TimeFormat   = "20060102150405"
	WorkspaceLoc = ".validator"

	ClusterConfigTemplate = "cluster-configuration.tmpl"
	SSHKeyPrompt          = "# Specify one or more SSH Public Keys below. Keys must be newline-separated. Type :wq to save and exit (if using vi).\n"
	KindImage             = "kindest/node"
	KindImageInternalRepo = "spectro-images-public/kindest/node"
	KindImageTag          = "v1.27.11"
	/*
		CertManagerManifest           = "cert-manager-v1.14.4.yaml"
		CertManagerManifestTemplate   = "cert-manager-v1.14.4.tmpl"
		ReachManifestTemplate         = "reach-v4.4.0.tmpl"
		ReachManifest                 = "reach-v4.4.0.yaml"
	*/
	NoProxyPrompt = "# Default NO_PROXY values are on the lines below.\n# Edit as you see fit (comments are ignored). The file should contain a list of NO_PROXY values, newline separated.\n# Type :wq to save and exit (if using vi).\n\n"
	/*
		DefaultNoProxy                = "127.0.0.1,192.168.0.0/16,10.0.0.0/16,10.96.0.0/12,169.254.169.254,169.254.0.0/24,localhost,kubernetes,kubernetes.default,kubernetes.default.svc,kubernetes.default.svc.cluster,kubernetes.default.svc.cluster.local,.svc,.svc.cluster,.svc.cluster.local,.svc.cluster.local,.company.local"
		ProxyClusterPodPresetTemplate = "proxy-cluster-pod-preset.tmpl"
	*/
	RegistryMirrorPrompt = "# This editor has Registry Mirror configs auto-generated by the CLI for the provided endpoint & base content path.\n" +
		"# This config will be used by Containerd for pulling images from the custom registry. You may replace or make additional changes to the auto-generated config.\n" +
		"# Type :wq to save and exit (if using vi)\n"
	RegistryMirrorSeparator = "::"

	// Validator constants
	ValidatorConfigFile      = "validator.yaml"
	ValidatorKindClusterName = "validator-kind-cluster"
	ValidatorHelmRepository  = "https://validator-labs.github.io"
	ValidatorImageRegistry   = "quay.io/validator-labs"

	ValidatorPluginAws     = "validator-plugin-aws"
	ValidatorPluginAzure   = "validator-plugin-azure"
	ValidatorPluginNetwork = "validator-plugin-network"
	ValidatorPluginOci     = "validator-plugin-oci"
	ValidatorPluginVsphere = "validator-plugin-vsphere"

	ValidatorPluginAwsTemplate     = "validator-rules-aws.tmpl"
	ValidatorPluginAzureTemplate   = "validator-rules-azure.tmpl"
	ValidatorPluginNetworkTemplate = "validator-rules-network.tmpl"
	ValidatorPluginOciTemplate     = "validator-rules-oci.tmpl"
	ValidatorPluginVsphereTemplate = "validator-rules-vsphere.tmpl"

	IamCheckTypeBase           IamCheckType = "Base"
	IamCheckTypeEks            IamCheckType = "EKS"
	IamCheckTypeMinimalDynamic IamCheckType = "Minimal-Dynamic"
	IamCheckTypeMinimalStatic  IamCheckType = "Minimal-Static"

	ValidatorVsphereEntityDatacenter     = "Datacenter"
	ValidatorVsphereEntityCluster        = "Cluster"
	ValidatorVsphereEntityFolder         = "Folder"
	ValidatorVsphereEntityResourcePool   = "Resource Pool"
	ValidatorVsphereEntityHost           = "ESXi Host"
	ValidatorVsphereEntityVirtualMachine = "Virtual Machine"
	ValidatorVsphereEntityVirtualApp     = "Virtual App"
	ValidatorVsphereVersionConstraint    = ">= 6.0, < 9.0"
	SpectroRootLevelPrivilegesV6_7       = "Spectro Root-level Role Privileges vSphere 6.7"
	SpectroRootLevelPrivilegesV7_0       = "Spectro Root-level Role Privileges vSphere 7.0"
	SpectroRootLevelPrivilegesV8_0       = "Spectro Root-level Role Privileges vSphere 8.0"
	CustomPrivileges                     = "Custom Root-level Role Privileges vSphere"
	SpectroEntityPrivileges              = "Spectro Entity Privileges"
	CustomEntityPrivileges               = "Custom Entity Privileges"
	SpectroCloudTags                     = "Spectro Cloud Tags"
	CustomVsphereTags                    = "Custom vSphere Tags"
	SpectroCloudTagsFile                 = "vsphere-spectro-cloud-tags.yaml"
	SpectroEntityPrivilegesFile          = "vsphere-spectro-entity-privileges.yaml"

	DefaultStorageClassAnnotation string = "storageclass.kubernetes.io/is-default-class"

	// Embed dirs
	Kind      string = "kind"
	Validator string = "validator"

	// regex
	DomainRegex          = "([a-zA-Z0-9]{1,63}|[a-zA-Z0-9][a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])(\\.[a-zA-Z0-9]{1,63}|\\.[a-zA-Z0-9][a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9]){0,10}\\.([a-zA-Z0-9][a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]{0,30}[a-zA-Z0-9]\\.[a-zA-Z]{2,})"
	UsernameRegex        = "[a-zA-Z0-9]+(?:\\.[a-zA-Z0-9]+)*(?:-[a-zA-Z0-9]+)*(?:_[a-zA-Z0-9]+)*"
	VSphereUsernameRegex = "^" + UsernameRegex + "@" + DomainRegex + "$"
	//PaletteResourceNameRegex = "[a-z][a-z0-9-]{1,31}[a-z0-9]"
	CDIImageRegistryRegex = "^(docker|oci-archive):\\/\\/([a-z0-9.\\-\\/]+)([:]{0})$"
	CPUReqRegex           = "(^\\d+\\.?\\d*[M,G]Hz)"
	MemoryReqRegex        = "(^\\d+\\.?\\d*[M,G,T]i)"
	DiskReqRegex          = "(^\\d+\\.?\\d*[M,G,T]i)"
	MaasApiRegex          = `^https?://.*\/MAAS$`
)

var (
	// Misc.
	DefaultPodCIDR        = "192.168.0.0/16"
	DefaultServiceIPRange = "10.96.0.0/12"
	HTTPSchemes           = []string{"https://", "http://"}

	/*
		// EC / PCG
		AirGappedKeywords = []string{DefaultScarKeyword, DefaultHarborPsswdKeyword, DefaultHostNameKeyword}
		ECMachineOptions  = MachineOptions{
			CPUOpts:     []string{"8", "16", "32", "Custom"},
			MemoryOpts:  []string{"16384", "32768", "65536", "Custom"},
			DiskOpts:    []string{"60", "100", "120", "Custom"},
			MongoPvc:    []string{"20", "60", "80"},
			MongoCpu:    []string{"2", "4", "6"},
			MongoMem:    []string{"4", "8", "12"},
			MinCPU:      8,
			MinMemory:   16384,
			MinDisk:     60,
			MinMongoPvc: 20,
			MinMongoCpu: 2,
			MinMongoMem: 4,
			Options: []string{
				"S: 8 CPU, 16 GB memory, 60 GB storage, 20 GB database with 2 CPU limit and 4 GB memory limit",
				"M: 16 CPU, 32 GB memory, 100 GB storage, 60 GB database with 4 CPU limit and 8 GB memory limit",
				"L: 32 CPU, 64 GB memory, 120 GB storage, 80 GB database with 8 CPU limit and 16 GB memory limit",
				"Custom",
			},
		}
		ECVertexMachineOptions = MachineOptions{
			CPUOpts:     []string{"16", "32", "64", "Custom"},
			MemoryOpts:  []string{"32768", "65536", "131072", "Custom"},
			DiskOpts:    []string{"60", "100", "120", "Custom"},
			MongoPvc:    []string{"20", "60", "80"},
			MongoCpu:    []string{"4", "6", "8"},
			MongoMem:    []string{"8", "12", "16"},
			MinCPU:      16,
			MinMemory:   32768,
			MinDisk:     60,
			MinMongoPvc: 20,
			MinMongoCpu: 4,
			MinMongoMem: 8,
			Options: []string{
				"S: 16 CPU, 32 GB memory, 60 GB storage, 20 GB database with 4 CPU limit and 8 GB memory limit",
				"M: 32 CPU, 64 GB memory, 100 GB storage, 60 GB database with 6 CPU limit and 12 GB memory limit",
				"L: 64 CPU, 128 GB memory, 120 GB storage, 80 GB database with 8 CPU limit and 16 GB memory limit",
				"Custom",
			},
		}
		PCGMachineOptions = MachineOptions{
			CPUOpts:    []string{"4", "8", "16", "Custom"},
			MemoryOpts: []string{"4096", "8192", "16384", "Custom"},
			DiskOpts:   []string{"60", "100", "200", "Custom"},
			MinCPU:     4,
			MinMemory:  4096,
			MinDisk:    60,
			Options: []string{
				"S: 4 CPU, 4 GB memory, 60 GB storage",
				"M: 8 CPU, 8 GB memory, 100 GB storage",
				"L: 16 CPU, 16 GB memory, 120 GB storage",
				"Custom",
			},
		}
	*/
	RegistryMirrors = []string{"docker.io", "gcr.io", "ghcr.io", "k8s.gcr.io", "registry.k8s.io", "quay.io", "*"}
	/*
		CertManagerWaitCmd           = []string{"wait", "--for=condition=available", "--timeout=600s", "deployment/cert-manager", "-n", "cert-manager"}
		CertManagerCaInjectorWaitCmd = []string{"wait", "--for=condition=available", "--timeout=600s", "deployment/cert-manager-cainjector", "-n", "cert-manager"}
		CertManagerWebhookWaitCmd    = []string{"wait", "--for=condition=available", "--timeout=600s", "deployment/cert-manager-webhook", "-n", "cert-manager"}
		ReachWaitCmd                 = []string{"wait", "--for=condition=available", "--timeout=600s", "deployment/reach-controller-manager", "-n", "reach-system"}

	*/
	// Command dirs
	BaseDirs = []string{"bin", "logs"}
	/*
		InstallSubdirs   = []string{"logs", "manifests", "pivot-manifests", "status"}
		PDESubdirs       = []string{"logs", "app-profiles"}
	*/
	ValidatorSubdirs = []string{"logs", "manifests"}
	/*
		VMSubdirs        = []string{"logs", "vms", "migrations"}

		// PDE
		AppDeploymentTypes   = []string{ClusterGroup, VirtualCluster}
		OperatorServiceTypes = []string{DatabaseService, MessagingService, ObjectStorageService, SecurityService}
		OperatorServiceMap   = map[string]string{
			DatabaseService:      "db",
			MessagingService:     "message-broker",
			ObjectStorageService: "storage",
			SecurityService:      "security",
		}
		TierTypes = []string{
			ContainerTier,
			HelmTier,
			ManifestTier,
			OperatorTier,
		}

		// Forklift
		ForkliftManifestFiles = []string{ForkliftVcenterSourceManifest, ForkliftHostsManifest,
			ForkliftNetworkmapManifest, ForkliftStoragemapManifest,
			ForkliftMigrationPlanManifest, ForkliftMigrationManifest,
		}
		ForkliftInstallationManifestsOrder = []string{CertManagerManifest, ForkliftOLMCRDsManifest, ForkliftOLMManifest,
			ForkliftOperatorManifest, ForkliftControllerManifest}
		ForkliftReadinessChecksMapping = map[string][]string{
			CertManagerManifest:        {"wait", "--for=condition=available", "--timeout=600s", "deployment/cert-manager", "-n", "cert-manager"},
			ForkliftOLMCRDsManifest:    nil,
			ForkliftOLMManifest:        {"wait", "--for=condition=available", "--timeout=600s", "deployment/olm-operator", "-n", "olm"},
			ForkliftOperatorManifest:   {"wait", "--for=condition=available", "--timeout=600s", "deployment/forklift-operator", "-n", "konveyor-forklift"},
			ForkliftControllerManifest: {"wait", "--for=condition=available", "--timeout=600s", "deployment/forklift-controller", "-n", "konveyor-forklift"},
		}
		ForkliftReadinessInitialWaitSeconds = map[string]int{
			CertManagerManifest:        15,
			ForkliftOLMCRDsManifest:    0,
			ForkliftOLMManifest:        30,
			ForkliftOperatorManifest:   90,
			ForkliftControllerManifest: 60,
		}
	*/

	// Validator
	PlacementTypeStatic  = "Static"
	PlacementTypeDynamic = "Dynamic"
	PlacementTypes       = []string{PlacementTypeStatic, PlacementTypeDynamic}

	ValidatorChartVersions = map[string]string{
		Validator:              "v0.0.41",
		ValidatorPluginAws:     "v0.0.26",
		ValidatorPluginAzure:   "v0.0.11",
		ValidatorPluginNetwork: "v0.0.16",
		ValidatorPluginVsphere: "v0.0.22",
		ValidatorPluginOci:     "v0.0.10",
	}

	ValidatorWaitCmd              = []string{"wait", "--for=condition=available", "--timeout=600s", "deployment/validator-controller-manager", "-n", "validator"}
	ValidatorPluginAwsWaitCmd     = []string{"wait", "--for=condition=available", "--timeout=600s", "deployment/validator-plugin-aws-controller-manager", "-n", "validator"}
	ValidatorPluginVsphereWaitCmd = []string{"wait", "--for=condition=available", "--timeout=600s", "deployment/validator-plugin-vsphere-controller-manager", "-n", "validator"}
	ValidatorPluginNetworkWaitCmd = []string{"wait", "--for=condition=available", "--timeout=600s", "deployment/validator-plugin-network-controller-manager", "-n", "validator"}
	ValidatorPluginOciWaitCmd     = []string{"wait", "--for=condition=available", "--timeout=600s", "deployment/validator-plugin-oci-controller-manager", "-n", "validator"}
	ValidatorPluginAzureWaitCmd   = []string{"wait", "--for=condition=available", "--timeout=600s", "deployment/validator-plugin-azure-controller-manager", "-n", "validator"}

	ValidatorBasicAuthKeys = []string{"username", "password"}
	ValidatorSinkKeys      = map[vtypes.SinkType][]string{
		vtypes.SinkTypeAlertmanager: {"endpoint", "insecureSkipVerify", "username", "password", "caCert"},
		vtypes.SinkTypeSlack:        {"apiToken", "channelId"},
	}
	ValidatorPluginAwsKeys                     = []string{"AWS_ACCESS_KEY_ID", "AWS_SECRET_ACCESS_KEY", "AWS_SESSION_TOKEN"}
	ValidatorPluginAzureKeys                   = []string{"AZURE_TENANT_ID", "AZURE_CLIENT_ID", "AZURE_CLIENT_SECRET"}
	ValidatorPluginVsphereKeys                 = []string{"username", "password", "vcenterServer", "insecureSkipVerify"}
	ValidatorPluginOciSigVerificationKeysRegex = ".pub$"

	ValidatorPluginAwsIamMap = map[IamCheckType]string{
		IamCheckTypeBase:           "awsvalidator-iam-role-spectro-cloud-base.tmpl",
		IamCheckTypeEks:            "awsvalidator-iam-role-spectro-cloud-eks.tmpl",
		IamCheckTypeMinimalDynamic: "awsvalidator-iam-role-spectro-cloud-minimal-dynamic.tmpl",
		IamCheckTypeMinimalStatic:  "awsvalidator-iam-role-spectro-cloud-minimal-static.tmpl",
	}
	ValidatorPluginAwsServiceQuotas = []prompts.ChoiceItem{
		{
			ID:   "ec2",
			Name: "EC2-VPC Elastic IPs",
		},
		{
			ID:   "ec2",
			Name: "Public AMIs",
		},
		{
			ID:   "elasticfilesystem",
			Name: "File systems per account",
		},
		{
			ID:   "elasticloadbalancing",
			Name: "Application Load Balancers per Region",
		},
		{
			ID:   "elasticloadbalancing",
			Name: "Classic Load Balancers per Region",
		},
		{
			ID:   "elasticloadbalancing",
			Name: "Network Load Balancers per Region",
		},
		{
			ID:   "vpc",
			Name: "Internet gateways per Region",
		},
		{
			ID:   "vpc",
			Name: "Network interfaces per Region",
		},
		{
			ID:   "vpc",
			Name: "VPCs per Region",
		},
		{
			ID:   "vpc",
			Name: "Subnets per VPC",
		},
		{
			ID:   "vpc",
			Name: "NAT gateways per Availability Zone",
		},
	}

	ValidatorPluginNetworkProxyProtocols = []prompts.ChoiceItem{
		{
			ID:   "4|1080",
			Name: "SOCKS v.4",
		},
		{
			ID:   "5|1080",
			Name: "SOCKS v.5",
		},
		{
			ID:   "connect|3128",
			Name: "HTTPS proxy",
		},
	}

	ValidatorPluginVsphereRolePrivilegeChoices = []string{
		SpectroRootLevelPrivilegesV6_7,
		SpectroRootLevelPrivilegesV7_0,
		SpectroRootLevelPrivilegesV8_0,
		CustomPrivileges,
	}
	ValidatorPluginVsphereRolePrivilegeFiles = map[string]string{
		SpectroRootLevelPrivilegesV6_7: "vsphere-root-level-privileges-7.0.yaml",
		SpectroRootLevelPrivilegesV7_0: "vsphere-root-level-privileges-7.0.yaml",
		SpectroRootLevelPrivilegesV8_0: "vsphere-root-level-privileges-8.0.yaml",
		CustomPrivileges:               "vsphere-root-level-privileges-all.yaml",
	}
	ValidatorPluginVsphereEntityPrivilegeChoices = []string{
		SpectroEntityPrivileges,
		CustomEntityPrivileges,
	}
	ValidatorPluginVsphereEntities = []string{
		ValidatorVsphereEntityCluster,
		ValidatorVsphereEntityDatacenter,
		ValidatorVsphereEntityHost,
		ValidatorVsphereEntityFolder,
		ValidatorVsphereEntityResourcePool,
		ValidatorVsphereEntityVirtualApp,
		ValidatorVsphereEntityVirtualMachine,
	}
	ValidatorPluginVsphereEntityMap = map[string]string{
		ValidatorVsphereEntityCluster:        "cluster",
		ValidatorVsphereEntityDatacenter:     "datacenter",
		ValidatorVsphereEntityHost:           "host",
		ValidatorVsphereEntityFolder:         "folder",
		ValidatorVsphereEntityResourcePool:   "resourcepool",
		ValidatorVsphereEntityVirtualApp:     "vapp",
		ValidatorVsphereEntityVirtualMachine: "vm",
	}
	ValidatorPluginVsphereDeploymentDestination = []string{
		ValidatorVsphereEntityCluster,
		ValidatorVsphereEntityHost,
		ValidatorVsphereEntityResourcePool,
	}
	ValidatorPluginVsphereTagChoices = []string{SpectroCloudTags, CustomVsphereTags}

	ValidatorAzurePluginStaticPlacementResourceGroupLevelActions = []string{
		"Microsoft.Compute/disks/delete",
		"Microsoft.Compute/disks/read",
		"Microsoft.Compute/disks/write",
		"Microsoft.Compute/virtualMachines/delete",
		"Microsoft.Compute/virtualMachines/extensions/delete",
		"Microsoft.Compute/virtualMachines/extensions/read",
		"Microsoft.Compute/virtualMachines/extensions/write",
		"Microsoft.Compute/virtualMachines/read",
		"Microsoft.Compute/virtualMachines/write",
		"Microsoft.Network/loadBalancers/backendAddressPools/join/action",
		"Microsoft.Network/loadBalancers/delete",
		"Microsoft.Network/loadBalancers/inboundNatRules/delete",
		"Microsoft.Network/loadBalancers/inboundNatRules/join/action",
		"Microsoft.Network/loadBalancers/inboundNatRules/read",
		"Microsoft.Network/loadBalancers/inboundNatRules/write",
		"Microsoft.Network/loadBalancers/read",
		"Microsoft.Network/loadBalancers/write",
		"Microsoft.Network/networkInterfaces/delete",
		"Microsoft.Network/networkInterfaces/join/action",
		"Microsoft.Network/networkInterfaces/read",
		"Microsoft.Network/networkInterfaces/write",
		"Microsoft.Network/networkSecurityGroups/read",
		"Microsoft.Network/networkSecurityGroups/securityRules/delete",
		"Microsoft.Network/networkSecurityGroups/securityRules/read",
		"Microsoft.Network/networkSecurityGroups/securityRules/write",
		"Microsoft.Network/privateDnsZones/A/delete",
		"Microsoft.Network/privateDnsZones/A/read",
		"Microsoft.Network/privateDnsZones/A/write",
		"Microsoft.Network/privateDnsZones/delete",
		"Microsoft.Network/privateDnsZones/read",
		"Microsoft.Network/privateDnsZones/virtualNetworkLinks/delete",
		"Microsoft.Network/privateDnsZones/virtualNetworkLinks/read",
		"Microsoft.Network/privateDnsZones/virtualNetworkLinks/write",
		"Microsoft.Network/privateDnsZones/write",
		"Microsoft.Network/publicIPAddresses/delete",
		"Microsoft.Network/publicIPAddresses/join/action",
		"Microsoft.Network/publicIPAddresses/read",
		"Microsoft.Network/publicIPAddresses/write",
		"Microsoft.Network/routeTables/delete",
		"Microsoft.Network/routeTables/read",
		"Microsoft.Network/routeTables/write",
		"Microsoft.Network/virtualNetworks/join/action",
		"Microsoft.Resources/subscriptions/resourceGroups/read",
	}
	ValidatorAzurePluginStaticPlacementVirtualNetworkLevelActions = []string{
		"Microsoft.Network/virtualNetworks/read",
	}
	ValidatorAzurePluginStaticPlacementSubnetLevelActions = []string{
		"Microsoft.Network/virtualNetworks/subnets/join/action",
		"Microsoft.Network/virtualNetworks/subnets/read",
	}
	ValidatorAzurePluginStaticPlacementComputeGalleryLevelActions = []string{
		"Microsoft.Compute/galleries/images/read",
		"Microsoft.Compute/galleries/images/versions/read",
	}
	ValidatorAzurePluginDynamicPlacementActions = []string{
		"Microsoft.Compute/disks/delete",
		"Microsoft.Compute/disks/read",
		"Microsoft.Compute/disks/write",
		"Microsoft.Compute/virtualMachines/delete",
		"Microsoft.Compute/virtualMachines/extensions/delete",
		"Microsoft.Compute/virtualMachines/extensions/read",
		"Microsoft.Compute/virtualMachines/extensions/write",
		"Microsoft.Compute/virtualMachines/read",
		"Microsoft.Compute/virtualMachines/write",
		"Microsoft.Network/loadBalancers/backendAddressPools/join/action",
		"Microsoft.Network/loadBalancers/delete",
		"Microsoft.Network/loadBalancers/inboundNatRules/delete",
		"Microsoft.Network/loadBalancers/inboundNatRules/join/action",
		"Microsoft.Network/loadBalancers/inboundNatRules/read",
		"Microsoft.Network/loadBalancers/inboundNatRules/write",
		"Microsoft.Network/loadBalancers/read",
		"Microsoft.Network/loadBalancers/write",
		"Microsoft.Network/networkInterfaces/delete",
		"Microsoft.Network/networkInterfaces/join/action",
		"Microsoft.Network/networkInterfaces/read",
		"Microsoft.Network/networkInterfaces/write",
		"Microsoft.Network/networkSecurityGroups/read",
		"Microsoft.Network/networkSecurityGroups/securityRules/delete",
		"Microsoft.Network/networkSecurityGroups/securityRules/read",
		"Microsoft.Network/networkSecurityGroups/securityRules/write",
		"Microsoft.Network/publicIPAddresses/delete",
		"Microsoft.Network/publicIPAddresses/join/action",
		"Microsoft.Network/publicIPAddresses/read",
		"Microsoft.Network/publicIPAddresses/write",
		"Microsoft.Network/routeTables/delete",
		"Microsoft.Network/routeTables/read",
		"Microsoft.Network/routeTables/write",
		"Microsoft.Resources/subscriptions/resourceGroups/read",
		"Microsoft.Network/privateDnsZones/read",
		"Microsoft.Network/privateDnsZones/write",
		"Microsoft.Network/privateDnsZones/delete",
		"Microsoft.Network/privateDnsZones/virtualNetworkLinks/read",
		"Microsoft.Network/privateDnsZones/virtualNetworkLinks/write",
		"Microsoft.Network/privateDnsZones/virtualNetworkLinks/delete",
		"Microsoft.Network/virtualNetworks/join/action",
		"Microsoft.Network/privateDnsZones/A/write",
		"Microsoft.Network/privateDnsZones/A/read",
		"Microsoft.Network/privateDnsZones/A/delete",
		"Microsoft.Storage/storageAccounts/blobServices/containers/write",
		"Microsoft.Storage/storageAccounts/blobServices/containers/read",
		"Microsoft.Storage/storageAccounts/write",
		"Microsoft.Storage/storageAccounts/read",
		"Microsoft.Storage/storageAccounts/blobServices/listKeys/action",
		"Microsoft.Network/virtualNetworks/write",
		"Microsoft.Network/virtualNetworks/read",
		"Microsoft.Network/virtualNetworks/delete",
		"Microsoft.Network/virtualNetworks/virtualMachines/read",
		"Microsoft.Network/virtualNetworks/virtualNetworkPeerings/read",
		"Microsoft.Network/virtualNetworks/virtualNetworkPeerings/write",
		"Microsoft.Network/virtualNetworks/virtualNetworkPeerings/delete",
		"Microsoft.Network/virtualNetworks/peer/action",
		"Microsoft.Network/virtualNetworks/join/action",
		"Microsoft.Network/virtualNetworks/joinLoadBalancer/action",
		"Microsoft.Network/virtualNetworks/subnets/write",
		"Microsoft.Network/virtualNetworks/subnets/read",
		"Microsoft.Network/virtualNetworks/subnets/delete",
		"Microsoft.Network/virtualNetworks/subnets/virtualMachines/read",
		"Microsoft.Network/virtualNetworks/subnets/join/action",
		"Microsoft.Network/virtualNetworks/subnets/joinLoadBalancer/action",
		"Microsoft.Compute/images/write",
		"Microsoft.Compute/images/read",
		"Microsoft.Compute/galleries/write",
		"Microsoft.Compute/galleries/read",
		"Microsoft.Compute/galleries/images/write",
		"Microsoft.Compute/galleries/images/read",
		"Microsoft.Compute/galleries/images/versions/read",
		"Microsoft.Compute/galleries/images/versions/write",
	}
)

func ValidatorIamCheckTypes() []string {
	checkTypes := make([]string, 0)
	for k := range ValidatorPluginAwsIamMap {
		checkTypes = append(checkTypes, string(k))
	}
	slices.Sort(checkTypes)
	return checkTypes
}

// Dynamic CLI Defaults

var GatewayIPDefault, NameServerDefault, NTPServerDefault, SearchDomainDefault string

func init() {
	if os.Getenv("SPECTRO_DEFAULTS") != "" {
		GatewayIPDefault = "10.10.128.1"
		NameServerDefault = "10.10.128.8"
		SearchDomainDefault = "spectrocloud.dev"
		NTPServerDefault = "8.8.8.8"
	}
}
